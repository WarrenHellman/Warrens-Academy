#############################
########The Console##########
#############################

Dev Tools in Chrome- open with f12

Can write JS in the console in Dev Tools (doesn't save)

document.querySelector('h1').style.color = 'red' // will make all h1 elements red 

console.table() // will show a table of an object literal
console.error() // will show an error in console log, useful to flag an error for you
console.warning() // will show a warning in console log
console.clear() // clears it out
console.time('anyName')
.
.
console.timeEnd('anyName') // logs the time in between the start (time) and end (timeEnd)

#############################
########Variables############
#############################

var, (since es6) let, const

var- try to phase out

let- can be initialized without a value

const- cannont be initialized without a value or reassigned to another primitive value (although you can change arrays and objects.) You should use const unless it is inappropriate (if you need it initialized without a value, in a for loop, or some functions)!! It will help keep your data from being accidentally altered. 


#############################
########Data Types###########
#############################

Primative Data Types- Stored directly in the location the variable accesses. Stored on the stack

Reference Data Types- Accessed by reference, stored on the heap with a pointer 

Primatives- String, number, Boolean, null, undefined, Symbols (ES6)

JS is dynamically typed (you can changes the data type of a variable at will). Typescript makes it statically typed (like Java, C#, C++)

Primitive Types:
// STRING
const name = 'John Doe';
// NUM
const age = 45
// Boolean
const hasKids=true;
// null
const car = null;
// undefined
let test;
// Symbol, new primative type
const sym = Symbol()

// REFERENCE TYPE (object)
// Array
const hobbies = ['movies', 'music']
// Object Literal
const address = {
    city: 'Boston',
    state: 'MA'
}
const today = new Date();

To check the data type, use console.log(typeof variable);

#############################
########Type Conversion######
#############################

let val;

// Number to String
number to String
val = String(555)
val = String (4+4)

Boolean to string
val = String(true)

date to string
val = String(new Date())

array to string
val = String([1,2,3,4])

toString() method
val = (5).toString();

//String to number
val = Number('5')
val = Number(true) = 1 // can be used for logical operators
val = Number(false) = 0
val = Number(null) = 0
val = Number('hello') = NaN

val = parseInt('100.3') = 100 (whole number integer from string)
val = parseFloat('100.3') = 100.3 for the parseFloat


#############################
#######Type Coersion#########
#############################

JavaScript can coerce type if not clear

const val1 = 5
const val2 = 6
const sum = val1 + val2 = 11, number

const val1 = String(5)
const val2 = 6
const sum = val1 + val2 = 56, string (it concatenates the two numbers but coerces 6 into a string)

#############################
#######Math Object###########
#############################

const num1 = 100;
const num2 = 50;
let val;

//Simple math with numbers

val = num1 + num2
val = num1 * num2

// Math Object

val = Math.PI; // gives a value of PI
val = Math.round(2.8); //rounds to 3
val = Math.floor(2.8); //gives 2
val = Math.ceil(2.3); // gives 3
val = Math.sqrt () square root
val = Math.abs(-3) gives 3
val = Math.random(); Gives a pseudo random number between 0-1
val = Math.floor(Math.random() * 100 +1 ) gives a whole number between 1 and 100. 


#############################
#######String Methods########
#############################

const firstName = 'Will';
const lastName = 'John';

let val;

//Concatenation
val = firstName + ' ' + lastName;

//Append
val = 'Brad ';
val += 'Traversy' ; // appends to the string

//Escaping

val = 'That's awesome and I can't wait' //the single quotes mess it up, could use double quotes or escape w/ a backslash \ in front of the quotes


//length
val = firstname.length; // 4

//concat
val = firstname.concat(' ', lastName); / concatenates the two

//Change changes
val = firstName.toUpperCase(); //capitalizes
val = firstName.toLowerCase(); //lowers

val = firstName[2]; //returns 3rd letter

//indexOf()

val = firstName.indexOf('l') //gives 2, first 'l'
val = firstName.lastIndexOf('l') //gives 3 for the last index of 'l' in Will

//charAt()

val = firstName.charAt('2'); gives 'l', at index 2 of Will
val = firstName.charAt(firstName.length-1);

//substring()

val = firstName.substring(0,2); // Will

//slice() 
val = firstName.slice(0,2); will do the same as substring and return 'Wi'
val = firstName.slice(-2); // actually returns last two characters. 

//split()
str= 'Hello there, my name is Brad';
val = str.split(' '); //creates an array where each index is split by the character added (in this case a space)

//replace();
val = str.replace('Brad', 'Jack') // first argument is found, replaced by second argument

//includes()
val = str.includes('Brad') // true, returns a boolean if it is found

#############################
##################
#############################
